<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.commune.paris.mapper.PGoodsValMapper">
  <resultMap id="BaseResultMap" type="com.commune.paris.entity.PGoodsVal">
    <id column="p_goods_val_id" jdbcType="INTEGER" property="id" />
    <result column="p_goods_val_goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="p_goods_val_attribute_id" jdbcType="INTEGER" property="attributeId" />
    <result column="p_goods_val_val_id" jdbcType="INTEGER" property="valId" />
    <result column="p_goods_val_val_string" jdbcType="VARCHAR" property="valString" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    p_goods_val.id as p_goods_val_id, p_goods_val.goods_id as p_goods_val_goods_id, p_goods_val.attribute_id as p_goods_val_attribute_id, 
    p_goods_val.val_id as p_goods_val_val_id, p_goods_val.val_string as p_goods_val_val_string
  </sql>
  <select id="selectByExample" parameterType="com.commune.paris.entity.PGoodsValExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from p_goods_val p_goods_val
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from p_goods_val p_goods_val
    where p_goods_val.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from p_goods_val
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.commune.paris.entity.PGoodsValExample">
    delete from p_goods_val p_goods_val
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.commune.paris.entity.PGoodsVal" useGeneratedKeys="true" keyProperty="id">
    insert into p_goods_val (id, goods_id, attribute_id, 
      val_id, val_string)
    values (#{id,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, #{attributeId,jdbcType=INTEGER}, 
      #{valId,jdbcType=INTEGER}, #{valString,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.commune.paris.entity.PGoodsVal" useGeneratedKeys="true" keyProperty="id">
    insert into p_goods_val
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
      <if test="attributeId != null">
        attribute_id,
      </if>
      <if test="valId != null">
        val_id,
      </if>
      <if test="valString != null">
        val_string,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="attributeId != null">
        #{attributeId,jdbcType=INTEGER},
      </if>
      <if test="valId != null">
        #{valId,jdbcType=INTEGER},
      </if>
      <if test="valString != null">
        #{valString,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.commune.paris.entity.PGoodsValExample" resultType="java.lang.Long">
    select count(*) from p_goods_val p_goods_val
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update p_goods_val p_goods_val
    <set>
      <if test="record.id != null">
        p_goods_val.id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.goodsId != null">
        p_goods_val.goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
      <if test="record.attributeId != null">
        p_goods_val.attribute_id = #{record.attributeId,jdbcType=INTEGER},
      </if>
      <if test="record.valId != null">
        p_goods_val.val_id = #{record.valId,jdbcType=INTEGER},
      </if>
      <if test="record.valString != null">
        p_goods_val.val_string = #{record.valString,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update p_goods_val p_goods_val
    set p_goods_val.id = #{record.id,jdbcType=INTEGER},
      p_goods_val.goods_id = #{record.goodsId,jdbcType=INTEGER},
      p_goods_val.attribute_id = #{record.attributeId,jdbcType=INTEGER},
      p_goods_val.val_id = #{record.valId,jdbcType=INTEGER},
      p_goods_val.val_string = #{record.valString,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.commune.paris.entity.PGoodsVal">
    update p_goods_val
    <set>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
      <if test="attributeId != null">
        attribute_id = #{attributeId,jdbcType=INTEGER},
      </if>
      <if test="valId != null">
        val_id = #{valId,jdbcType=INTEGER},
      </if>
      <if test="valString != null">
        val_string = #{valString,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.commune.paris.entity.PGoodsVal">
    update p_goods_val
    set goods_id = #{goodsId,jdbcType=INTEGER},
      attribute_id = #{attributeId,jdbcType=INTEGER},
      val_id = #{valId,jdbcType=INTEGER},
      val_string = #{valString,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>