<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.commune.paris.mapper.PUserMapper">
  <resultMap id="BaseResultMap" type="com.commune.paris.entity.PUser">
    <id column="p_user_id" jdbcType="INTEGER" property="id" />
    <result column="p_user_username" jdbcType="VARCHAR" property="username" />
    <result column="p_user_avatar" jdbcType="VARCHAR" property="avatar" />
    <result column="p_user_email" jdbcType="VARCHAR" property="email" />
    <result column="p_user_password" jdbcType="VARCHAR" property="password" />
    <result column="p_user_status" jdbcType="INTEGER" property="status" />
    <result column="p_user_created" jdbcType="TIMESTAMP" property="created" />
    <result column="p_user_last_login" jdbcType="TIMESTAMP" property="lastLogin" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    p_user.id as p_user_id, p_user.username as p_user_username, p_user.avatar as p_user_avatar, 
    p_user.email as p_user_email, p_user.`password` as `p_user_password`, p_user.`status` as `p_user_status`, 
    p_user.created as p_user_created, p_user.last_login as p_user_last_login
  </sql>
  <select id="selectByExample" parameterType="com.commune.paris.entity.PUserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from p_user p_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from p_user p_user
    where p_user.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from p_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.commune.paris.entity.PUserExample">
    delete from p_user p_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.commune.paris.entity.PUser">
    insert into p_user (id, username, avatar, 
      email, `password`, `status`, 
      created, last_login)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{created,jdbcType=TIMESTAMP}, #{lastLogin,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.commune.paris.entity.PUser" useGeneratedKeys="true" keyProperty="id">
    insert into p_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="lastLogin != null">
        last_login,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLogin != null">
        #{lastLogin,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.commune.paris.entity.PUserExample" resultType="java.lang.Long">
    select count(*) from p_user p_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update p_user p_user
    <set>
      <if test="record.id != null">
        p_user.id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        p_user.username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.avatar != null">
        p_user.avatar = #{record.avatar,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        p_user.email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        p_user.`password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        p_user.`status` = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        p_user.created = #{record.created,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLogin != null">
        p_user.last_login = #{record.lastLogin,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update p_user p_user
    set p_user.id = #{record.id,jdbcType=INTEGER},
      p_user.username = #{record.username,jdbcType=VARCHAR},
      p_user.avatar = #{record.avatar,jdbcType=VARCHAR},
      p_user.email = #{record.email,jdbcType=VARCHAR},
      p_user.`password` = #{record.password,jdbcType=VARCHAR},
      p_user.`status` = #{record.status,jdbcType=INTEGER},
      p_user.created = #{record.created,jdbcType=TIMESTAMP},
      p_user.last_login = #{record.lastLogin,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.commune.paris.entity.PUser">
    update p_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLogin != null">
        last_login = #{lastLogin,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.commune.paris.entity.PUser">
    update p_user
    set username = #{username,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      created = #{created,jdbcType=TIMESTAMP},
      last_login = #{lastLogin,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="countAll" parameterType="map" resultType="int" >
    select count(1)
    from p_user p_user
    <if test="username != null">
      where username like "%"#{username}"%"
    </if>
  </select>
  <select id="getUserByPage" parameterType="map" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from p_user p_user
    <if test="username != null">
      where username like "%"#{username}"%"
    </if>
    limit #{page.offset},#{page.pageSize}
  </select>
</mapper>